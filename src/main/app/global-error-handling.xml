<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
    <choice-exception-strategy name="apiKitExceptionStrategy">

        <catch-exception-strategy when="#[exception.causedBy(org.mule.module.http.internal.request.ResponseValidatorException)]" doc:name="Caused By (org.mule.module.http.internal.request.ResponseValidatorException)">
            <set-property propertyName="http.status" value="#[message.inboundProperties.'http.status']" doc:name="Set http Status"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": inboundProperties.'http.status',
	"errorDescription": payload.message,
	"retry": "false"
}]]></dw:set-payload>
            </dw:transform-message>
            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                <add-message-property key="vLogPayload" value="#[payload]"/>
            </message-properties-transformer>
            <logger message="Hello: #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>



        </catch-exception-strategy>
		
		<catch-exception-strategy doc:name="Caused By (org.mule.extension.validation.api.MultipleValidationException)" when="#[exception.causedBy(org.mule.extension.validation.api.MultipleValidationException)]">
            <set-property propertyName="http.status" value="#[500]" doc:name="Set HTTP Status"/>
            <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
            </dw:transform-message>

            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
            	<add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
	            <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>

	            <add-message-property key="vFlowName" value="#[context:serviceName]"/>

                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                <add-message-property key="vLogPayload" value="#[payload]"/>
            </message-properties-transformer>
            <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>


            
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causedBy(java.util.concurrent.TimeoutException) || exception.causedBy(java.net.ConnectException)]" doc:name="Caused By (java.util.concurrent.TimeoutException) or Caused By (java.net.ConnectException)">
            <set-property propertyName="http.status" value="#[502]" doc:name="Set http status"/>
            <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
            <choice doc:name="Choice">
                <when expression="'${switch}' == 'ON'">
                    <choice doc:name="Choice">
                        <when expression="flowVars.retry == 'false'">
                            <logger message="#['finished retry']" level="INFO" doc:name="Logger"/>
                            <dw:transform-message doc:name="Transform Message">
                                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": 'kvmchaitanya@hmail.com',
	"timestamp": now as :datetime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "true"
}]]></dw:set-payload>
                            </dw:transform-message>
                            <message-properties-transformer scope="invocation" doc:name="Copy_of_Set Error Properties">
                                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                                <add-message-property key="vLogPayload" value="#[payload]"/>
                            </message-properties-transformer>
                        </when>
                        <otherwise>
                            <vm:outbound-endpoint exchange-pattern="one-way" path="retrySFMC" doc:name="VM"/>
                            <dw:transform-message doc:name="Copy_of_Transform Message">
                                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": 'kvmchaitanya@hmail.com',
	"timestamp": now as :datetime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "true"
}]]></dw:set-payload>
                            </dw:transform-message>
                            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                                <add-message-property key="vLogPayload" value="#[payload]"/>
                            </message-properties-transformer>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <logger message="#['No Retry']" level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>


        </catch-exception-strategy>
		<catch-exception-strategy when="#[exception.causedBy(org.mule.module.apikit.exception.BadRequestException)]" doc:name="Caused By (org.mule.module.apikit.exception.BadRequestException)">
            <set-property propertyName="http.status" value="#[400]" doc:name="Set http status"/>
            <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
            </dw:transform-message>
            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                <add-message-property key="vLogPayload" value="#[payload]"/>
            </message-properties-transformer>
            <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>



        </catch-exception-strategy>
        <catch-exception-strategy
			doc:name="org.mule.module.ws.consumer.SoapFaultException"
			when="exception.causedBy(org.mule.module.ws.consumer.SoapFaultException)">
            <set-property propertyName="http.status" value="#[500]" doc:name="HTTP 500"/>
            <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
            </dw:transform-message>

            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                <add-message-property key="vLogPayload" value="#[payload]"/>
            </message-properties-transformer>
            <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>



		</catch-exception-strategy>
		<catch-exception-strategy  doc:name="Caused By (org.springframework.security.authentication.BadCredentialsException)" when="exception.causedBy(org.springframework.security.authentication.BadCredentialsException)">

					<set-property propertyName="http.status" value="#[401]" doc:name="Set http status" />
            <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
            </dw:transform-message>
            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                <add-message-property key="vLogPayload" value="#[payload]"/>
            </message-properties-transformer>
            <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>



				</catch-exception-strategy>
				
		<catch-exception-strategy  doc:name="Caused By (org.mule.extension.validation.api.ValidationException)" when="#[exception.causedBy(org.mule.extension.validation.api.ValidationException)]">
            <set-property propertyName="http.status" value="#[500]" doc:name="Set http status"/>
            <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
            </dw:transform-message>
            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                <add-message-property key="vLogPayload" value="#[payload]"/>
            </message-properties-transformer>
            <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>



				</catch-exception-strategy>
				<catch-exception-strategy  doc:name="org.mule.module.apikit.exception.*" when="exception.causeMatches('org.mule.module.apikit.exception.*')">
			<set-payload value="#[org.mule.util.ExceptionUtils.getRootCauseMessage(exception)]" doc:name="Set Payload"/>
	
			<flow-ref name="apiKitExceptionHandlingSubFlow" doc:name="apiKitExceptionHandlingSubFlow"/>
		</catch-exception-strategy>
		<catch-exception-strategy doc:name="defaultCatchExceptionStrategy">
            <set-property propertyName="http.status" value="#[500]" doc:name="HTTP 500"/>
            <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
            </dw:transform-message>

            <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                <add-message-property key="vLogPayload" value="#[payload]"/>
            </message-properties-transformer>
            <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>



		</catch-exception-strategy>
    </choice-exception-strategy>
    
    <sub-flow name="apiKitExceptionHandlingSubFlow">
        <choice doc:name="Choice">

            <when expression="#[exception.causedBy(org.mule.module.apikit.exception.NotFoundException)]">
                <set-property propertyName="http.status" value="404" doc:name="HTTP 404" />
                <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
                </dw:transform-message>
                <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                    <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                    <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                    <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                    <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                    <add-message-property key="vLogPayload" value="#[payload]"/>
                </message-properties-transformer>
                <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>


            </when>
            <when expression="#[exception.causedBy(org.mule.module.apikit.exception.MethodNotAllowedException)]">
				<set-property propertyName="http.status" value="405" doc:name="HTTP 405" />
                <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
                </dw:transform-message>
                <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                    <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                    <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                    <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                    <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                    <add-message-property key="vLogPayload" value="#[payload]"/>
                </message-properties-transformer>
                <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>


            </when>
            <when expression="#[exception.causedBy(org.mule.module.apikit.exception.NotAcceptableException)]">
                <set-property propertyName="http.status" value="406" doc:name="HTTP 406" />
                <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
                </dw:transform-message>
                <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                    <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                    <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                    <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                    <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                    <add-message-property key="vLogPayload" value="#[payload]"/>
                </message-properties-transformer>
                <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>



            </when>
            <when expression="#[exception.causedBy(org.mule.module.apikit.exception.UnsupportedMediaTypeException)]">
                <set-property propertyName="http.status" value="415" doc:name="HTTP 415"/>
                <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
                </dw:transform-message>
                <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                    <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                    <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                    <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                    <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                    <add-message-property key="vLogPayload" value="#[payload]"/>
                </message-properties-transformer>
                <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>



            </when>            
            <otherwise>
                <set-property propertyName="http.status" value="500" doc:name="HTTP 500" />
                <set-variable variableName="errorDescription" value="#[exception.getCause().getMessage()]" doc:name="Set Error Description"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"email": flowVars.emailId,
	"timestamp": flowVars.vMessageReceiptTime,
	"success": "false",
	"errorCode": outboundProperties."http.status",
	"errorDescription": flowVars.errorDescription,
	"retry": "false"
}]]></dw:set-payload>
                </dw:transform-message>
                <message-properties-transformer scope="invocation" doc:name="Set Error Properties">
                    <add-message-property key="vMessageId" value="#[message.inboundProperties.vMessageId !=null ? message.inboundProperties.vMessageId : message.id]"/>
                    <add-message-property key="vRequestId" value="#[message.inboundProperties.vRequestId !=null ? message.inboundProperties.vRequestId :  message.id]"/>
                    <add-message-property key="vFlowName" value="#[context:serviceName]"/>
                    <add-message-property key="vTimeStamp" value="#[server.dateTime.format('HH:mm:ss.S MM/dd/YYYY';)]"/>
                    <add-message-property key="vLogPayload" value="#[payload]"/>
                </message-properties-transformer>
                <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Copy_of_Logger"/>


            </otherwise>
        </choice>
    </sub-flow>
          
</mule>
